{
    "project": {
        "name": "SmugMug YUI Gallery API docs",
        "description": "Kickass gallery modules courtesy of your pals at SmugMug.",
        "version": "3.8.0",
        "url": "https://github.com/smugmug/yui-gallery"
    },
    "files": {
        "src/sm-editor/js/extensions/editor-keys.js": {
            "name": "src/sm-editor/js/extensions/editor-keys.js",
            "modules": {
                "gallery-sm-editor-keys": 1
            },
            "classes": {
                "Editor.Keys": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-editor/js/extensions/editor-undo.js": {
            "name": "src/sm-editor/js/extensions/editor-undo.js",
            "modules": {
                "gallery-sm-editor-undo": 1
            },
            "classes": {
                "Editor.Undo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-editor/js/editor-base.js": {
            "name": "src/sm-editor/js/editor-base.js",
            "modules": {
                "gallery-sm-editor-base": 1
            },
            "classes": {
                "Editor.Base": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-editor/js/editor.js": {
            "name": "src/sm-editor/js/editor.js",
            "modules": {
                "gallery-sm-editor": 1
            },
            "classes": {
                "Editor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-menu/js/plugins/menu-plugin.js": {
            "name": "src/sm-menu/js/plugins/menu-plugin.js",
            "modules": {
                "gallery-sm-menu-plugin": 1
            },
            "classes": {
                "Plugin.Menu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-menu/js/menu-base.js": {
            "name": "src/sm-menu/js/menu-base.js",
            "modules": {
                "gallery-sm-menu-base": 1
            },
            "classes": {
                "Menu.Base": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-menu/js/menu-item.js": {
            "name": "src/sm-menu/js/menu-item.js",
            "modules": {
                "gallery-sm-menu-item": 1
            },
            "classes": {
                "Menu.Item": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-menu/js/menu-templates.js": {
            "name": "src/sm-menu/js/menu-templates.js",
            "modules": {
                "gallery-sm-menu-templates": 1
            },
            "classes": {
                "Menu.Templates": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-menu/js/menu.js": {
            "name": "src/sm-menu/js/menu.js",
            "modules": {
                "gallery-sm-menu": 1
            },
            "classes": {
                "Menu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-selection/js/range.js": {
            "name": "src/sm-selection/js/range.js",
            "modules": {
                "gallery-sm-range": 1
            },
            "classes": {
                "Range": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-selection/js/selection.js": {
            "name": "src/sm-selection/js/selection.js",
            "modules": {
                "gallery-sm-selection": 1
            },
            "classes": {
                "Selection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-tree/js/extensions/tree-node-openable.js": {
            "name": "src/sm-tree/js/extensions/tree-node-openable.js",
            "modules": {
                "tree-node-openable": 1
            },
            "classes": {
                "Tree.Node.Openable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-tree/js/extensions/tree-node-selectable.js": {
            "name": "src/sm-tree/js/extensions/tree-node-selectable.js",
            "modules": {
                "tree-node-selectable": 1
            },
            "classes": {
                "Tree.Node.Selectable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-tree/js/extensions/tree-openable.js": {
            "name": "src/sm-tree/js/extensions/tree-openable.js",
            "modules": {
                "tree-openable": 1
            },
            "classes": {
                "Tree.Openable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-tree/js/extensions/tree-selectable.js": {
            "name": "src/sm-tree/js/extensions/tree-selectable.js",
            "modules": {
                "tree-selectable": 1
            },
            "classes": {
                "Tree.Selectable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-tree/js/plugins/tree-lazy.js": {
            "name": "src/sm-tree/js/plugins/tree-lazy.js",
            "modules": {
                "gallery-sm-tree-lazy": 1
            },
            "classes": {
                "Plugin.Tree.Lazy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-tree/js/tree-node.js": {
            "name": "src/sm-tree/js/tree-node.js",
            "modules": {
                "gallery-sm-tree-node": 1
            },
            "classes": {
                "Tree.Node": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-tree/js/tree.js": {
            "name": "src/sm-tree/js/tree.js",
            "modules": {
                "gallery-sm-tree": 1
            },
            "classes": {
                "Tree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/sm-treeview/js/treeview.js": {
            "name": "src/sm-treeview/js/treeview.js",
            "modules": {
                "gallery-sm-treeview": 1
            },
            "classes": {
                "TreeView": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "gallery-sm-editor": {
            "name": "gallery-sm-editor",
            "submodules": {
                "gallery-sm-editor-keys": 1,
                "gallery-sm-editor-undo": 1,
                "gallery-sm-editor-base": 1
            },
            "classes": {
                "Editor.Keys": 1,
                "Editor.Undo": 1,
                "Editor.Base": 1,
                "Editor": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/sm-editor/js/editor.js",
            "line": 10,
            "description": "Provides `Y.Editor`, a simple but powerful WYSIWYG editor.",
            "itemtype": "main"
        },
        "gallery-sm-editor-keys": {
            "name": "gallery-sm-editor-keys",
            "submodules": {},
            "classes": {
                "Editor.Keys": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-editor",
            "namespace": "",
            "file": "src/sm-editor/js/extensions/editor-keys.js",
            "line": 10,
            "description": "Provides the `Editor.Keys` extension."
        },
        "gallery-sm-editor-undo": {
            "name": "gallery-sm-editor-undo",
            "submodules": {},
            "classes": {
                "Editor.Undo": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-editor",
            "namespace": "",
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 10,
            "description": "Provides the `Editor.Undo` extension."
        },
        "gallery-sm-editor-base": {
            "name": "gallery-sm-editor-base",
            "submodules": {},
            "classes": {
                "Editor.Base": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-editor",
            "namespace": "",
            "file": "src/sm-editor/js/editor-base.js",
            "line": 12,
            "description": "Provides `Y.Editor.Base`, the core implementation of the SmugMug editor."
        },
        "gallery-sm-menu": {
            "name": "gallery-sm-menu",
            "submodules": {
                "gallery-sm-menu-plugin": 1,
                "gallery-sm-menu-base": 1,
                "gallery-sm-menu-item": 1,
                "gallery-sm-menu-templates": 1
            },
            "classes": {
                "Plugin.Menu": 1,
                "Menu.Base": 1,
                "Menu.Item": 1,
                "Menu.Templates": 1,
                "Menu": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/sm-menu/js/menu.js",
            "line": 10,
            "description": "Provides the `Y.Menu` widget.",
            "itemtype": "main"
        },
        "gallery-sm-menu-plugin": {
            "name": "gallery-sm-menu-plugin",
            "submodules": {},
            "classes": {
                "Plugin.Menu": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-menu",
            "namespace": "",
            "file": "src/sm-menu/js/plugins/menu-plugin.js",
            "line": 8,
            "description": "Provides the `Y.Plugin.Menu` Node plugin."
        },
        "gallery-sm-menu-base": {
            "name": "gallery-sm-menu-base",
            "submodules": {},
            "classes": {
                "Menu.Base": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-menu",
            "namespace": "",
            "file": "src/sm-menu/js/menu-base.js",
            "line": 10,
            "description": "Provides `Menu.Base`."
        },
        "gallery-sm-menu-item": {
            "name": "gallery-sm-menu-item",
            "submodules": {},
            "classes": {
                "Menu.Item": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-menu",
            "namespace": "",
            "file": "src/sm-menu/js/menu-item.js",
            "line": 10,
            "description": "Provides the `Menu.Item` class."
        },
        "gallery-sm-menu-templates": {
            "name": "gallery-sm-menu-templates",
            "submodules": {},
            "classes": {
                "Menu.Templates": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-menu",
            "namespace": "",
            "file": "src/sm-menu/js/menu-templates.js",
            "line": 8,
            "description": "Provides templates for `Menu`."
        },
        "gallery-sm-selection": {
            "name": "gallery-sm-selection",
            "submodules": {
                "gallery-sm-range": 1
            },
            "classes": {
                "Range": 1,
                "Selection": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/sm-selection/js/selection.js",
            "line": 11,
            "description": "Provides the `Selection` class, which normalizes text selection functionality\nacross browsers.",
            "itemtype": "main"
        },
        "gallery-sm-range": {
            "name": "gallery-sm-range",
            "submodules": {},
            "classes": {
                "Range": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-selection",
            "namespace": "",
            "file": "src/sm-selection/js/range.js",
            "line": 15,
            "description": "Provides the `Range` class, which normalizes Range behavior across browsers."
        },
        "tree-openable": {
            "name": "tree-openable",
            "submodules": {
                "tree-node-openable": 1
            },
            "classes": {
                "Tree.Node.Openable": 1,
                "Tree.Openable": 1
            },
            "fors": {},
            "namespaces": {},
            "module": "tree",
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 11,
            "description": "Extension for `Tree` that adds the concept of open/closed state for nodes.",
            "tag": "main",
            "itemtype": "main"
        },
        "tree-node-openable": {
            "name": "tree-node-openable",
            "submodules": {},
            "classes": {
                "Tree.Node.Openable": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "tree-openable",
            "namespace": "",
            "file": "src/sm-tree/js/extensions/tree-node-openable.js",
            "line": 9,
            "description": "Provides the `Tree.Node.Openable` class, an extension for `Tree.Node` that\nadds methods useful for nodes in trees that use the `Tree.Openable` extension."
        },
        "tree-selectable": {
            "name": "tree-selectable",
            "submodules": {
                "tree-node-selectable": 1
            },
            "classes": {
                "Tree.Node.Selectable": 1,
                "Tree.Selectable": 1
            },
            "fors": {},
            "namespaces": {},
            "module": "tree",
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 11,
            "description": "Extension for `Tree` that adds the concept of selection state for nodes.",
            "tag": "main",
            "itemtype": "main"
        },
        "tree-node-selectable": {
            "name": "tree-node-selectable",
            "submodules": {},
            "classes": {
                "Tree.Node.Selectable": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "tree-selectable",
            "namespace": "",
            "file": "src/sm-tree/js/extensions/tree-node-selectable.js",
            "line": 9,
            "description": "Provides the `Tree.Node.Selectable` class, an extension for `Tree.Node` that\nadds methods useful for nodes in trees that use the `Tree.Selectable` extension."
        },
        "tree": {
            "name": "tree",
            "submodules": {},
            "classes": {
                "Tree.Openable": 1,
                "Tree.Selectable": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 11
        },
        "gallery-sm-tree": {
            "name": "gallery-sm-tree",
            "submodules": {
                "gallery-sm-tree-lazy": 1,
                "gallery-sm-tree-node": 1
            },
            "classes": {
                "Plugin.Tree.Lazy": 1,
                "Tree.Node": 1,
                "Tree": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/sm-tree/js/tree.js",
            "line": 9,
            "description": "Provides the `Tree` class."
        },
        "gallery-sm-tree-lazy": {
            "name": "gallery-sm-tree-lazy",
            "submodules": {},
            "classes": {
                "Plugin.Tree.Lazy": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-tree",
            "namespace": "",
            "file": "src/sm-tree/js/plugins/tree-lazy.js",
            "line": 12,
            "description": "Provides `Plugin.Tree.Lazy`, a plugin for `Tree.Openable` that makes it easy to\nlazily load and populate the contents of tree nodes the first time they're\nopened."
        },
        "gallery-sm-tree-node": {
            "name": "gallery-sm-tree-node",
            "submodules": {},
            "classes": {
                "Tree.Node": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "gallery-sm-tree",
            "namespace": "",
            "file": "src/sm-tree/js/tree-node.js",
            "line": 11,
            "description": "Provides the `Tree.Node` class, which represents a tree node contained in a\n`Tree` data structure."
        },
        "gallery-sm-treeview": {
            "name": "gallery-sm-treeview",
            "submodules": {},
            "classes": {
                "TreeView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/sm-treeview/js/treeview.js",
            "line": 10,
            "description": "Provides the `Y.TreeView` widget.",
            "itemtype": "main"
        }
    },
    "classes": {
        "Editor.Keys": {
            "name": "Editor.Keys",
            "shortname": "Editor.Keys",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Editor.Base",
                "Editor"
            ],
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-keys",
            "namespace": "",
            "file": "src/sm-editor/js/extensions/editor-keys.js",
            "line": 10,
            "description": "Extension for `Editor.Base` that adds support for configurable keyboard\nshortcuts, including a set of default shortcuts.",
            "is_constructor": 1,
            "extends": "Base"
        },
        "Editor.Undo": {
            "name": "Editor.Undo",
            "shortname": "Editor.Undo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Editor.Base",
                "Editor"
            ],
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo",
            "namespace": "",
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 10,
            "description": "Extension for `Editor.Base` that adds a cross-browser undo/redo stack.\n\nWhen mixed into an editor that also mixes in the `Editor.Keys` extension, handy\nundo/redo keyboard shortcuts and triggers will be added as well.",
            "is_constructor": 1,
            "extends": "Base"
        },
        "Editor.Base": {
            "name": "Editor.Base",
            "shortname": "Editor.Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base",
            "namespace": "",
            "file": "src/sm-editor/js/editor-base.js",
            "line": 12,
            "description": "Base implementation of the SmugMug editor. Provides core editor functionality,\nbut no undo stack, keyboard shortcuts, etc.",
            "is_constructor": 1,
            "extends": "View"
        },
        "Editor": {
            "name": "Editor",
            "shortname": "Editor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-editor",
            "namespace": "",
            "file": "src/sm-editor/js/editor.js",
            "line": 10,
            "description": "A simple but powerful WYSIWYG editor.",
            "is_constructor": 1,
            "extends": "Editor.Base",
            "uses": [
                "Editor.Keys",
                "Editor.Undo"
            ]
        },
        "Plugin.Menu": {
            "name": "Plugin.Menu",
            "shortname": "Plugin.Menu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-plugin",
            "namespace": "",
            "file": "src/sm-menu/js/plugins/menu-plugin.js",
            "line": 8,
            "description": "Node plugin that toggles a dropdown menu when the host node is clicked.\n\n### Example\n\n    YUI().use('menu-plugin', function (Y) {\n        var button = Y.one('#button');\n\n        // Plug a dropdown menu into the button.\n        button.plug(Y.Plugin.Menu, {\n            items: [\n                {label: 'Item One'},\n                {label: 'Item Two'},\n                {label: 'Item Three'}\n            ]\n        });\n\n        // The menu will automatically be displayed whenever the button is\n        // clicked, but you can also toggle it manually.\n        button.menu.toggle();\n    });",
            "is_constructor": 1,
            "extends": "Menu",
            "uses": [
                "Plugin.Base"
            ]
        },
        "Menu.Base": {
            "name": "Menu.Base",
            "shortname": "Menu.Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base",
            "namespace": "",
            "file": "src/sm-menu/js/menu-base.js",
            "line": 10,
            "description": "Base menu functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "Config options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "items",
                            "description": "Array of `Menu.Item` instances\n        or menu item config objects to add to this menu.",
                            "type": "Menu.Item[]|Object[]",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Tree"
        },
        "Menu.Item": {
            "name": "Menu.Item",
            "shortname": "Menu.Item",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-item",
            "namespace": "",
            "file": "src/sm-menu/js/menu-item.js",
            "line": 10,
            "description": "Represents a single menu item in a `Menu`.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "menu",
                    "description": "`Menu` instance with which this node should be associated.",
                    "type": "Menu"
                },
                {
                    "name": "config",
                    "description": "Configuration hash for this menu item. Supports all the\n    config properties of `Tree.Node` in addition to the following.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "state",
                            "description": "State hash for this menu item.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "disabled",
                                    "description": "If `true`, this menu item\n            will be disabled, and will not be clickable or selectable.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "hidden",
                                    "description": "If `true`, this menu item\n            will be hidden.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "type",
                            "description": "Type of this menu item. May be 'item',\n        'heading', or 'separator'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'item'"
                        },
                        {
                            "name": "url",
                            "description": "URL associated with this item. If this item\n        is of type 'item', clicking on the item will navigate to this URL.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'#'"
                        }
                    ]
                }
            ],
            "extends": "Tree.Node"
        },
        "Menu.Templates": {
            "name": "Menu.Templates",
            "shortname": "Menu.Templates",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-templates",
            "namespace": "",
            "file": "src/sm-menu/js/menu-templates.js",
            "line": 8,
            "description": "Templates for `Menu`."
        },
        "Menu": {
            "name": "Menu",
            "shortname": "Menu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-menu",
            "namespace": "",
            "file": "src/sm-menu/js/menu.js",
            "line": 10,
            "description": "Menu widget.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "Config options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sourceNode",
                            "description": "Node instance, HTML\n    element, or selector string for a node (usually a `<ul>` or `<ol>`) whose\n    structure should be parsed and used to generate this menu's contents. This\n    node will be removed from the DOM after being parsed.",
                            "type": "HTMLElement|Node|String",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Menu.Base",
            "uses": [
                "View"
            ]
        },
        "Range": {
            "name": "Range",
            "shortname": "Range",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range",
            "namespace": "",
            "file": "src/sm-selection/js/range.js",
            "line": 15,
            "description": "Provides a friendly cross-browser Range API similar to the API defined in the\nDOM Range specification.",
            "params": [
                {
                    "name": "range",
                    "description": "Native Range object to wrap. If not provided, a\n    new Range will be created.",
                    "type": "window.Range",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "Selection": {
            "name": "Selection",
            "shortname": "Selection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-selection",
            "namespace": "",
            "file": "src/sm-selection/js/selection.js",
            "line": 11,
            "description": "Normalizes text selection functionality across browsers.",
            "is_constructor": 1
        },
        "Tree.Node.Openable": {
            "name": "Tree.Node.Openable",
            "shortname": "Tree.Node.Openable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Tree.Node"
            ],
            "module": "tree-openable",
            "submodule": "tree-node-openable",
            "namespace": "",
            "file": "src/sm-tree/js/extensions/tree-node-openable.js",
            "line": 9,
            "description": "`Tree.Node` extension that adds methods useful for nodes in trees that use the\n`Tree.Openable` extension.",
            "is_constructor": 1
        },
        "Tree.Node.Selectable": {
            "name": "Tree.Node.Selectable",
            "shortname": "Tree.Node.Selectable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Tree.Node"
            ],
            "module": "tree-selectable",
            "submodule": "tree-node-selectable",
            "namespace": "",
            "file": "src/sm-tree/js/extensions/tree-node-selectable.js",
            "line": 9,
            "description": "`Tree.Node` extension that adds methods useful for nodes in trees that use the\n`Tree.Selectable` extension.",
            "is_constructor": 1
        },
        "Tree.Openable": {
            "name": "Tree.Openable",
            "shortname": "Tree.Openable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Tree",
                "TreeView"
            ],
            "module": "tree",
            "submodule": "tree-openable",
            "namespace": "",
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 11,
            "description": "Extension for `Tree` that adds the concept of open/closed state for nodes.",
            "is_constructor": 1
        },
        "Tree.Selectable": {
            "name": "Tree.Selectable",
            "shortname": "Tree.Selectable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Tree",
                "TreeView"
            ],
            "module": "tree",
            "submodule": "tree-selectable",
            "namespace": "",
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 11,
            "description": "Extension for `Tree` that adds the concept of selection state for nodes.",
            "is_constructor": 1
        },
        "Plugin.Tree.Lazy": {
            "name": "Plugin.Tree.Lazy",
            "shortname": "Plugin.Tree.Lazy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-lazy",
            "namespace": "",
            "file": "src/sm-tree/js/plugins/tree-lazy.js",
            "line": 12,
            "description": "A plugin for `Tree.Openable` that makes it easy to lazily load and populate the\ncontents of tree nodes the first time they're opened.\n\n### Example\n\n    YUI().use('jsonp', 'gallery-sm-tree-openable', 'gallery-sm-tree-lazy', function (Y) {\n        var Tree = Y.Base.create('openableTree', Y.Tree, [Y.Tree.Openable]),\n            tree = new Tree();\n\n        tree.plug(Y.Plugin.Tree.Lazy, {\n\n            // Custom function that Plugin.Tree.Lazy will call when it needs to\n            // load the children for a node.\n            load: function (node, callback) {\n                // Request the data for this node's children via JSONP.\n                Y.jsonp('http://example.com/api/data?callback={callback}', function (data) {\n                    // If we didn't get any data back, treat this as an error.\n                    if (!data) {\n                        callback(new Error('No data!'));\n                        return;\n                    }\n\n                    // Append the children to the node (assume `data.children` is\n                    // an array of child node data for the sake of this example).\n                    node.append(data.children);\n\n                    // Call the callback function to tell Plugin.Tree.Lazy that\n                    // we're done loading data.\n                    callback();\n                });\n            }\n\n        });\n    });",
            "params": [
                {
                    "name": "config",
                    "description": "Config object.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "load",
                            "description": "Custom `load()` function that will be called\n        when a node's children need to be loaded. This function must call the\n        provided callback to indicate completion.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "callback",
                                    "description": "Callback function. The custom\n            `load()` function must call this callback to indicate completion.",
                                    "type": "Function"
                                },
                                {
                                    "name": "callback.err",
                                    "description": "Error object. If provided,\n                the load action will be considered a failure, and an `error`\n                event will be fired. Omit this argument (or set it to `null`) to\n                indicate success.",
                                    "type": "Error",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "extends": "Plugin.Base",
            "is_constructor": 1
        },
        "Tree.Node": {
            "name": "Tree.Node",
            "shortname": "Tree.Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node",
            "namespace": "",
            "file": "src/sm-tree/js/tree-node.js",
            "line": 11,
            "description": "Represents a tree node in a `Tree` data structure.",
            "params": [
                {
                    "name": "tree",
                    "description": "`Tree` instance with which this node should be associated.",
                    "type": "Tree"
                },
                {
                    "name": "config",
                    "description": "Configuration hash for this node.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "canHaveChildren",
                            "description": "Whether or not this node can\n        contain child nodes. Will be automatically set to `true` if not\n        specified and `config.children` contains one or more children.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "children",
                            "description": "Array of `Tree.Node` instances\n        for child nodes of this node.",
                            "type": "Tree.Node[]",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "Implementation-specific data related to this\n        node. You may add arbitrary properties to this hash for your own use.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "id",
                            "description": "Unique id for this node. This id must be unique\n        among all tree nodes on the entire page, and will also be used as this\n        node's DOM id when it's rendered by a TreeView. A unique id will be\n        automatically generated unless you specify a custom value.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "label",
                            "description": "User-visible HTML label for this node.",
                            "type": "HTML",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "state",
                            "description": "State hash for this node. You may add\n        arbitrary state properties to this hash for your own use. See the\n        docs for `Tree.Node`'s `state` property for details on state values used\n        internally by `Tree.Node`.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1
        },
        "Tree": {
            "name": "Tree",
            "shortname": "Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "TreeView"
            ],
            "module": "gallery-sm-tree",
            "namespace": "",
            "file": "src/sm-tree/js/tree.js",
            "line": 9,
            "description": "The `Tree` class represents a generic tree data structure. A tree has a root\nnode, which may contain any number of child nodes, which may themselves contain\nchild nodes, ad infinitum.\n\nThis class doesn't expose any UI, but is extended by the `TreeView` class, which\ndoes.",
            "params": [
                {
                    "name": "config",
                    "description": "Config options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "nodes",
                            "description": "Array of tree node config\n        objects or `Tree.Node` instances to add to this tree at initialization\n        time.",
                            "type": "Object[]|Tree.Node[]",
                            "optional": true
                        },
                        {
                            "name": "rootNode",
                            "description": "Node to use as the root node of\n        this tree.",
                            "type": "Object|Tree.Node",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "extends": "Base"
        },
        "TreeView": {
            "name": "TreeView",
            "shortname": "TreeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sm-treeview",
            "namespace": "",
            "file": "src/sm-treeview/js/treeview.js",
            "line": 10,
            "description": "TreeView widget.",
            "is_constructor": 1,
            "extends": "View",
            "uses": [
                "Tree",
                "Tree.Openable",
                "Tree.Selectable"
            ]
        }
    },
    "classitems": [
        {
            "file": "src/sm-editor/js/extensions/editor-keys.js",
            "line": 23,
            "description": "Hash of keyCode values that should be ignored when processing keyboard\nevents.\n\nThis is used to avoid double-handling of modifier keys, since other event\nproperties are used to detect whether modifier keys are pressed.",
            "itemtype": "property",
            "name": "ignoreKeyCodes",
            "type": "Object",
            "class": "Editor.Keys",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-keys"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-keys.js",
            "line": 41,
            "description": "Mapping of keyCode values to friendly names for special keys.",
            "itemtype": "property",
            "name": "keyCodeMap",
            "type": "Object",
            "class": "Editor.Keys",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-keys"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-keys.js",
            "line": 72,
            "description": "Mapping of shortcut keys to function handlers.",
            "itemtype": "property",
            "name": "keyCommands",
            "type": "Object",
            "class": "Editor.Keys",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-keys"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-keys.js",
            "line": 103,
            "description": "Attaches keyboard events.",
            "itemtype": "method",
            "name": "_attachKeyEvents",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Keys",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-keys"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-keys.js",
            "line": 121,
            "description": "Detaches keyboard events.",
            "itemtype": "method",
            "name": "_detachKeyEvents",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Keys",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-keys"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-keys.js",
            "line": 136,
            "description": "Handles `keydown` events on this editor.",
            "itemtype": "method",
            "name": "_onKeyDown",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Editor.Keys",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-keys"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 25,
            "description": "Key commands related to undo/redo functionality.",
            "itemtype": "property",
            "name": "undoKeyCommands",
            "type": "Object",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 48,
            "description": "Array of redoable changes that have previously been undone.",
            "itemtype": "property",
            "name": "_redoStack",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 55,
            "description": "Array of undoable changes that have been made to this editor.",
            "itemtype": "property",
            "name": "_undoStack",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 86,
            "description": "Redoes the last change that was undone in this editor.",
            "itemtype": "method",
            "name": "redo",
            "chainable": 1,
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 123,
            "description": "Undoes the last change made in this editor.",
            "itemtype": "method",
            "name": "undo",
            "chainable": 1,
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 162,
            "description": "Adds an entry to the undo stack representing the current state of the\neditor.",
            "itemtype": "method",
            "name": "_addUndo",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 192,
            "description": "Adds an entry to the redo stack representing the current state of the\neditor.",
            "itemtype": "method",
            "name": "_addRedo",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 222,
            "description": "Attaches undo events.",
            "itemtype": "method",
            "name": "_attachUndoEvents",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 238,
            "description": "Wrapper for `Editor.Base#_execCommand()`.",
            "itemtype": "method",
            "name": "_beforeExecCommand",
            "params": [
                {
                    "name": "name",
                    "description": "Command name.",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 251,
            "description": "Detaches undo events.",
            "itemtype": "method",
            "name": "_detachUndoEvents",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 266,
            "description": "Handles editor `render` events.",
            "itemtype": "method",
            "name": "_afterRender",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/extensions/editor-undo.js",
            "line": 277,
            "description": "Number of undo/redo levels to maintain. Lowering this number may reduce\nmemory usage, especially when editing very large documents.",
            "itemtype": "attribute",
            "name": "undoLevels",
            "type": "Number",
            "default": "20",
            "class": "Editor.Undo",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-undo"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 24,
            "description": "Fired after this editor is rendered.",
            "itemtype": "event",
            "name": "render",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 31,
            "description": "Fired when this editor's selection changes.",
            "itemtype": "event",
            "name": "selectionChange",
            "params": [
                {
                    "name": "prevRange",
                    "description": "Range that was previously selected, or `null` if there\n    was no previous selection.",
                    "type": "Range"
                },
                {
                    "name": "range",
                    "description": "Range that's now selected, or `null` if the current\n    selection is empty or outside the editor.",
                    "type": "Range"
                },
                {
                    "name": "selection",
                    "description": "Reference to this editor's Selection instance.",
                    "type": "Selection"
                }
            ],
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 46,
            "description": "CSS class names used by this editor.",
            "itemtype": "property",
            "name": "classNames",
            "type": "Object",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base",
            "subprops": [
                {
                    "name": "cursor",
                    "description": "Class name used for a placeholder node that\n    represents the cursor position.",
                    "type": "String"
                },
                {
                    "name": "editor",
                    "description": "Class name used for the editor's container.",
                    "type": "String"
                },
                {
                    "name": "input",
                    "description": "Class name used for the WYSIWYG YUI Editor frame that\n    will receive user input.",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 62,
            "description": "`Y.Selection` instance representing the current document selection.\n\nThe selection object's state always reflects the current selection, so it\nwill update when the selection changes. If you need to retain the state of a\npast selection, hold onto a Range instance representing that selection.\n\nAlso, beware: this selection object reflects the current selection in the\nentire browser document, not just within this editor.",
            "itemtype": "property",
            "name": "selection",
            "type": "Selection",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 75,
            "description": "Hash of style commands supported by this editor.\n\nNames should correspond with valid `execCommand()` command names. Values\nshould be strings specifying the style's type: either 'boolean' or 'string'.",
            "itemtype": "property",
            "name": "styleCommands",
            "type": "Object",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base",
            "subprops": [
                {
                    "name": "bold",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'boolean'"
                },
                {
                    "name": "italic",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'boolean'"
                },
                {
                    "name": "fontName",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'string'"
                },
                {
                    "name": "fontSize",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'string'"
                },
                {
                    "name": "underline",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'string'"
                }
            ]
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 120,
            "description": "Removes focus from this editor.",
            "itemtype": "method",
            "name": "blur",
            "chainable": 1,
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 134,
            "description": "Bolds or unbolds the current selection.",
            "itemtype": "method",
            "name": "bold",
            "chainable": 1,
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 145,
            "description": "Gets and/or sets the value of the specified editor command.\n\nSee <https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla>\nfor a list of possible commands.",
            "itemtype": "method",
            "name": "command",
            "params": [
                {
                    "name": "name",
                    "description": "Command name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Command value. Use the special value\n    'toggle' to toggle a boolean command (like 'bold') to the opposite of\n    its current state.",
                    "type": "Boolean|String|null",
                    "optional": true
                }
            ],
            "return": {
                "description": "Value of the specified command.",
                "type": "Boolean|String"
            },
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 166,
            "description": "Decreases the font size of the current selection (if possible).",
            "itemtype": "method",
            "name": "decreaseFontSize",
            "chainable": 1,
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 182,
            "description": "Focuses this editor.",
            "itemtype": "method",
            "name": "focus",
            "chainable": 1,
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 196,
            "description": "Increases the font size of the current selection (if possible).",
            "itemtype": "method",
            "name": "increaseFontSize",
            "chainable": 1,
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 212,
            "description": "Inserts the specified _html_ at the current selection point, deleting the\ncurrent selection if there is one.",
            "itemtype": "method",
            "name": "insertHTML",
            "params": [
                {
                    "name": "html",
                    "description": "HTML to insert, in the form of an HTML\n    string, HTMLElement, or Node instance.",
                    "type": "HTML|HTMLElement|Node"
                }
            ],
            "return": {
                "description": "Node instance representing the inserted HTML.",
                "type": "Node"
            },
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 238,
            "description": "Inserts the specified plain _text_ at the current selection point, deleting\nthe current selection if there is one.",
            "itemtype": "method",
            "name": "insertText",
            "params": [
                {
                    "name": "text",
                    "description": "Text to insert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Node instance representing the inserted text node.",
                "type": "Node"
            },
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 250,
            "description": "Italicizes or unitalicizes the current selection.",
            "itemtype": "method",
            "name": "italic",
            "chainable": 1,
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 261,
            "description": "Renders this editor into its container and appends the container to the\ndocument if necessary.",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 306,
            "description": "Gets and/or sets the value of the specified editor style command. This\nmethod is similar to `command()`, but only supports a subset of\nstyle-related commands.\n\nSee the `styleCommands` property for a list of supported style commands.",
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "name",
                    "description": "Command name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Command value. Use the special value\n    'toggle' to toggle a boolean command (like 'bold') to the opposite of\n    its current state.",
                    "type": "Boolean|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Value of the specified command.",
                "type": "Boolean|String"
            },
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 329,
            "description": "Gets and/or sets the values of multiple editor style commands.\n\nWhen called without an argument, the current values of all supported style\ncommands will be returned. When called with a _styles_ object, the specified\nstyle commands will be set to their given values, and the resulting new\nvalues will be returned.",
            "itemtype": "method",
            "name": "styles",
            "params": [
                {
                    "name": "styles",
                    "description": "Hash of style names and values to set.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Hash of style names and values that were set, or all styles\n    if no _styles_ parameter was specified.",
                "type": "Object"
            },
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 365,
            "description": "Toggles underline on the current selection.",
            "itemtype": "method",
            "name": "underline",
            "chainable": 1,
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 378,
            "description": "Attaches editor events.",
            "itemtype": "method",
            "name": "_attachEvents",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 399,
            "description": "Detaches editor events.",
            "itemtype": "method",
            "name": "_detachEvents",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 412,
            "description": "Wrapper for native the native `execCommand()` that verifies that the command\nis valid in the current state and normalizes boolean/toggleable values.",
            "itemtype": "method",
            "name": "_execCommand",
            "params": [
                {
                    "name": "name",
                    "description": "Command name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Command value.",
                    "type": "Boolean|String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 441,
            "description": "Getter for the `html` attribute.",
            "itemtype": "method",
            "name": "_getHTML",
            "params": [
                {
                    "name": "value",
                    "description": "Internal value.",
                    "type": "HTML"
                }
            ],
            "return": {
                "description": "HTML.",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 453,
            "description": "Getter for the `text` attribute.",
            "itemtype": "method",
            "name": "_getText",
            "params": [
                {
                    "name": "value",
                    "description": "Internal value.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Text.",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 465,
            "description": "Inserts a `<span>` at the current selection point containing a preformatted\ntab character.",
            "itemtype": "method",
            "name": "_insertTab",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 476,
            "description": "Wrapper for the native `queryCommandState()` and `queryCommandValue()`\nmethods that uses the appropriate method for the given command type.",
            "itemtype": "method",
            "name": "_queryCommandValue",
            "params": [
                {
                    "name": "name",
                    "description": "Command name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Command value.",
                "type": "Boolean|String"
            },
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 490,
            "description": "Setter for the `html` attribute.",
            "itemtype": "method",
            "name": "_setHTML",
            "params": [
                {
                    "name": "value",
                    "description": "HTML.",
                    "type": "HTML"
                }
            ],
            "return": {
                "description": "HTML.",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 506,
            "description": "Setter for the `text` attribute.",
            "itemtype": "method",
            "name": "_setText",
            "params": [
                {
                    "name": "value",
                    "description": "Text.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Text.",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 522,
            "description": "Refreshes the editor's internal knowledge of the current document selection\nstate and fires a `selectionChange` event if the selection has changed since\nit was last refreshed.",
            "itemtype": "method",
            "name": "_updateSelection",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `selectionChange`\n        event will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 557,
            "description": "Handles `blur` events on the editor.",
            "itemtype": "method",
            "name": "_onBlur",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 572,
            "description": "Handles `focus` events on the editor.",
            "itemtype": "method",
            "name": "_onFocus",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 594,
            "description": "Handles `paste` events on the editor.",
            "itemtype": "method",
            "name": "_onPaste",
            "access": "protected",
            "tagname": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 605,
            "description": "HTML content of this editor.",
            "itemtype": "attribute",
            "name": "html",
            "type": "HTML",
            "default": "''",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 617,
            "description": "Form field name to use for the hidden `<textarea>` that contains the raw\noutput of the editor in the configured output format. This name will\nonly be used if the output node doesn't already have a name when the\neditor is rendered.\n\nYou may need to customize this if you plan to use the editor in a form\nthat will be submitted to a server.",
            "itemtype": "attribute",
            "name": "outputName",
            "type": "String",
            "default": "'editor'",
            "initonly": "",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-editor/js/editor-base.js",
            "line": 635,
            "description": "Text content of this editor, with no HTML.",
            "itemtype": "attribute",
            "name": "text",
            "type": "String",
            "default": "''",
            "class": "Editor.Base",
            "module": "gallery-sm-editor",
            "submodule": "gallery-sm-editor-base"
        },
        {
            "file": "src/sm-menu/js/plugins/menu-plugin.js",
            "line": 51,
            "description": "Repositions this menu so that it is anchored to a specified node, region, or\nset of pixel coordinates.\n\nThe menu will be displayed at the most advantageous position relative to the\nanchor point to ensure that as much of the menu as possible is visible\nwithin the viewport.\n\nIf no anchor point is specified, the menu will be positioned relative to its\nhost node.",
            "itemtype": "method",
            "name": "reposition",
            "params": [
                {
                    "name": "anchorPoint",
                    "description": "Anchor point at which this menu\n    should be positioned. The point may be specified as a `Y.Node`\n    reference, a region object, or an array of X and Y pixel coordinates.",
                    "type": "Node|Number[]|Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Plugin.Menu",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-plugin"
        },
        {
            "file": "src/sm-menu/js/plugins/menu-plugin.js",
            "line": 100,
            "description": "Returns an efficient test function that can be passed to `Y.Node#ancestor()`\nto test whether a node is this menu's container or its plugin host.\n\nThis is broken out to make overriding easier in subclasses.",
            "itemtype": "method",
            "name": "_getAncestorTestFn",
            "return": {
                "description": "Test function.",
                "type": "Function"
            },
            "access": "protected",
            "tagname": "",
            "class": "Plugin.Menu",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-plugin"
        },
        {
            "file": "src/sm-menu/js/plugins/menu-plugin.js",
            "line": 173,
            "description": "If `true`, this menu will be shown when the host node is clicked with\nthe left mouse button or (in the case of `<button>`, `<input>`, and\n`<a>` elements) activated with the Return key.",
            "itemtype": "attribute",
            "name": "showOnClick",
            "type": "Boolean",
            "default": "true",
            "initonly": "",
            "class": "Plugin.Menu",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-plugin"
        },
        {
            "file": "src/sm-menu/js/plugins/menu-plugin.js",
            "line": 187,
            "description": "If `true`, this menu will be shown when the host node's `contextmenu`\nevent occurs, which happens when the user takes an action that would\nnormally display the browser's context menu (such as right-clicking).\n\nWhen `true`, the browser's default context menu will be prevented from\nappearing.",
            "itemtype": "attribute",
            "name": "showOnContext",
            "type": "Boolean",
            "default": "false",
            "initonly": "",
            "class": "Plugin.Menu",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-plugin"
        },
        {
            "file": "src/sm-menu/js/plugins/menu-plugin.js",
            "line": 204,
            "description": "If `true`, this menu will be shown when the host node is hovered or\nreceives focus instead of only being shown when it's clicked.",
            "itemtype": "attribute",
            "name": "showOnHover",
            "type": "Boolean",
            "default": "false",
            "initonly": "",
            "class": "Plugin.Menu",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-plugin"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 21,
            "description": "Fired when a menu item is disabled.",
            "itemtype": "event",
            "name": "disable",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item that was disabled.",
                    "type": "Menu.Item"
                }
            ],
            "preventable": "_defDisableFn",
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 30,
            "description": "Fired when a menu item is enabled.",
            "itemtype": "event",
            "name": "enable",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item that was enabled.",
                    "type": "Menu.Item"
                }
            ],
            "preventable": "_defEnableFn",
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 39,
            "description": "Fired when a menu item is hidden.",
            "itemtype": "event",
            "name": "hide",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item that was hidden.",
                    "type": "Menu.Item"
                }
            ],
            "preventable": "_defHideFn",
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 48,
            "description": "Fired when a menu item is shown.",
            "itemtype": "event",
            "name": "show",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item that was shown.",
                    "type": "Menu.Item"
                }
            ],
            "preventable": "_defShowFn",
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 69,
            "description": "Closes all open submenus of this menu.",
            "itemtype": "method",
            "name": "closeSubMenus",
            "chainable": 1,
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 84,
            "description": "Disables the specified menu item.",
            "itemtype": "method",
            "name": "disableItem",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item to disable.",
                    "type": "Menu.Item"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `disable` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 105,
            "description": "Enables the specified menu item.",
            "itemtype": "method",
            "name": "enableItem",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item to enable.",
                    "type": "Menu.Item"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `enable` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 126,
            "description": "Hides the specified menu item.",
            "itemtype": "method",
            "name": "hideItem",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item to hide.",
                    "type": "Menu.Item"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `hide` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 147,
            "description": "Shows the specified menu item.",
            "itemtype": "method",
            "name": "showItem",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item to show.",
                    "type": "Menu.Item"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `show` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 170,
            "description": "Default handler for the `disable` event.",
            "itemtype": "method",
            "name": "_defDisableFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 181,
            "description": "Default handler for the `enable` event.",
            "itemtype": "method",
            "name": "_defEnableFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 192,
            "description": "Default handler for the `hide` event.",
            "itemtype": "method",
            "name": "_defHideFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-base.js",
            "line": 203,
            "description": "Default handler for the `show` event.",
            "itemtype": "method",
            "name": "_defShowFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu.Base",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-base"
        },
        {
            "file": "src/sm-menu/js/menu-item.js",
            "line": 49,
            "description": "Disables this menu item. Disabled items are not clickable or selectable.",
            "itemtype": "method",
            "name": "disable",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `disable` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu.Item",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-item"
        },
        {
            "file": "src/sm-menu/js/menu-item.js",
            "line": 63,
            "description": "Enables this menu item.",
            "itemtype": "method",
            "name": "enable",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `enable` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu.Item",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-item"
        },
        {
            "file": "src/sm-menu/js/menu-item.js",
            "line": 77,
            "description": "Hides this menu item.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `hide` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu.Item",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-item"
        },
        {
            "file": "src/sm-menu/js/menu-item.js",
            "line": 91,
            "description": "Returns `true` if this menu item is currently disabled.",
            "itemtype": "method",
            "name": "isDisabled",
            "return": {
                "description": "`true` if this menu item is currently disabled, `false`\n    otherwise.",
                "type": "Boolean"
            },
            "class": "Menu.Item",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-item"
        },
        {
            "file": "src/sm-menu/js/menu-item.js",
            "line": 102,
            "description": "Returns `true` if this menu item is currently hidden.",
            "itemtype": "method",
            "name": "isHidden",
            "return": {
                "description": "`true` if this menu item is currently hidden, `false`\n    otherwise.",
                "type": "Boolean"
            },
            "class": "Menu.Item",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-item"
        },
        {
            "file": "src/sm-menu/js/menu-item.js",
            "line": 113,
            "description": "Shows this menu item.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `show` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu.Item",
            "module": "gallery-sm-menu",
            "submodule": "gallery-sm-menu-item"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 27,
            "description": "Fired when any clickable menu item is clicked.\n\nYou can subscribe to clicks on a specific menu item by subscribing to\n\"itemClick#id\", where \"id\" is the item id of the item you want to subscribe to.",
            "itemtype": "event",
            "name": "itemClick",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item that was clicked.",
                    "type": "Menu.Item"
                },
                {
                    "name": "originEvent",
                    "description": "Original click event.",
                    "type": "EventFacade"
                }
            ],
            "preventable": "_defItemClickFn",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 42,
            "description": "CSS class names used by this menu.",
            "itemtype": "property",
            "name": "classNames",
            "type": "Object",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 66,
            "description": "Whether or not this menu has been rendered.",
            "itemtype": "property",
            "name": "rendered",
            "type": "Boolean",
            "default": "false",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 74,
            "description": "Selectors to use when parsing a menu structure from a DOM structure via\n`parseHTML()`.",
            "itemtype": "property",
            "name": "sourceSelectors",
            "type": "Object",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 118,
            "description": "Returns the HTML node (as a `Y.Node` instance) associated with the specified\nmenu item, if any.",
            "itemtype": "method",
            "name": "getHTMLNode",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item.",
                    "type": "Menu.Item"
                }
            ],
            "return": {
                "description": "`Y.Node` instance associated with the given tree node, or\n    `undefined` if one was not found.",
                "type": "Node"
            },
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 135,
            "description": "Hides this menu.",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 146,
            "description": "Parses the specified HTML _sourceNode_ as a menu structure and returns an\narray of menu item objects that can be used to generate a menu with that\nstructure.\n\nBy default, _sourceNode_ is expected to contain one `<li>` element per\nmenu item, and submenus are expected to be represented by `<ul>` or `<ol>`\nelements.\n\nThe selector queries used to parse the menu structure are contained in the\n`sourceSelectors` property, and may be customized. Class names specified in\nthe `classNames` property are used to determine whether a menu item should\nbe disabled, hidden, or treated as a heading or separator.",
            "itemtype": "method",
            "name": "parseHTML",
            "params": [
                {
                    "name": "sourceNode",
                    "description": "Node instance, HTML element, or\n    selector string for the node (usually a `<ul> or `<ol>` element) to\n    parse.",
                    "type": "HTMLElement|Node|String"
                }
            ],
            "return": {
                "description": "Array of menu item objects.",
                "type": "Object[]"
            },
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 229,
            "description": "Renders this menu into its container.\n\nIf the container hasn't already been added to the current document, it will\nbe appended to the `<body>` element.",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 265,
            "description": "Renders the children of the specified menu item.\n\nIf a container is specified, it will be assumed to be an existing rendered\nmenu item, and the children will be rendered (or re-rendered) inside it.",
            "itemtype": "method",
            "name": "renderChildren",
            "params": [
                {
                    "name": "menuItem",
                    "description": "Menu item whose children should be rendered.",
                    "type": "Menu.Item"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "container",
                            "description": "`Y.Node` instance of a container into\n        which the children should be rendered. If the container already\n        contains rendered children, they will be re-rendered in place.",
                            "type": "Node",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "`Y.Node` instance containing the rendered children.",
                "type": "Node"
            },
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 316,
            "description": "Renders the specified menu item and its children (if any).\n\nIf a container is specified, the rendered node will be appended to it.",
            "itemtype": "method",
            "name": "renderNode",
            "params": [
                {
                    "name": "menuItem",
                    "description": "Tree node to render.",
                    "type": "Menu.Item"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "container",
                            "description": "`Y.Node` instance of a container to\n        which the rendered tree node should be appended.",
                            "type": "Node",
                            "optional": true
                        },
                        {
                            "name": "renderChildren",
                            "description": "Whether or not to render\n        this node's children.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "`Y.Node` instance of the rendered menu item.",
                "type": "Node"
            },
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 401,
            "description": "Repositions this menu so that it is anchored to a specified node, region, or\nset of pixel coordinates.\n\nThe menu will be displayed at the most advantageous position relative to the\nanchor point to ensure that as much of the menu as possible is visible\nwithin the viewport.",
            "itemtype": "method",
            "name": "reposition",
            "params": [
                {
                    "name": "anchorPoint",
                    "description": "Anchor point at which this menu\n    should be positioned. The point may be specified as a `Y.Node`\n    reference, a region object, or an array of X and Y pixel coordinates.",
                    "type": "Node|Number[]|Object"
                }
            ],
            "chainable": 1,
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 443,
            "description": "Shows this menu.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "anchorPoint",
                            "description": "Anchor point at\n        which this menu should be positioned when shown. The point may be\n        specified as a `Y.Node` reference, a region object, or an array of X\n        and Y pixel coordinates.",
                            "type": "Node|Number[]|Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 463,
            "description": "Toggles the visibility of this menu, showing it if it's currently hidden or\nhiding it if it's currently visible.",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "anchorPoint",
                            "description": "Anchor point at\n        which this menu should be positioned when shown. The point may be\n        specified as a `Y.Node` reference, a region object, or an array of X\n        and Y pixel coordinates.",
                            "type": "Node|Number[]|Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 481,
            "description": "Attaches menu events.",
            "itemtype": "method",
            "name": "_attachMenuEvents",
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 517,
            "description": "Detaches menu events.",
            "itemtype": "method",
            "name": "_detachMenuEvents",
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 527,
            "description": "Returns an efficient test function that can be passed to `Y.Node#ancestor()`\nto test whether a node is this menu's container.\n\nThis is broken out to make overriding easier in subclasses.",
            "itemtype": "method",
            "name": "_getAncestorTestFn",
            "return": {
                "description": "Test function.",
                "type": "Function"
            },
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 545,
            "description": "Given an anchor point and the regions currently occupied by a child node\n(the node being anchored) and a parent node (the node being anchored to),\nreturns a region object representing the coordinates the anchored node will\noccupy when anchored to the given point on the parent.\n\nAn anchor point is a string like \"tl-bl\", which means \"anchor the top left\npoint of _nodeRegion_ to the bottom left point of _parentRegion_\".\n\nAny combination of top/bottom/left/right anchor points may be used as long\nas they follow this format. Here are a few examples:\n\n  * `'bl-br'`: Anchor the bottom left of _nodeRegion_ to the bottom right of\n    _parentRegion_.\n  * `'br-bl'`: Anchor the bottom right of _nodeRegion_ to the bottom left of\n    _parentRegion_.\n  * `'tl-tr'`: Anchor the top left of _nodeRegion_ to the top right of\n    _parentRegion_.\n  * `'tr-tl'`: Anchor the top right of _nodeRegion_ to the top left of\n    _parentRegion_.",
            "itemtype": "method",
            "name": "_getAnchorRegion",
            "params": [
                {
                    "name": "anchor",
                    "description": "Anchor point. See above for details.",
                    "type": "String"
                },
                {
                    "name": "nodeRegion",
                    "description": "Region object for the node to be anchored (that\n    is, the node that will be repositioned).",
                    "type": "Object"
                },
                {
                    "name": "parentRegion",
                    "description": "Region object for the node that will be\n    anchored to (that is, the node that will not move).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Region that will be occupied by the anchored node.",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 642,
            "description": "Hides the specified menu container by moving its htmlNode offscreen.",
            "itemtype": "method",
            "name": "_hideMenu",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item.",
                    "type": "Menu.Item"
                },
                {
                    "name": "htmlNode",
                    "description": "HTML node for the menu item.",
                    "type": "Node",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 659,
            "description": "Returns `true` if the given _inner_ region is contained entirely within the\ngiven _outer_ region. If it's not a perfect fit, returns a numerical score\nindicating how much of the _inner_ region fits within the _outer_ region.\nA higher score indicates a better fit.",
            "itemtype": "method",
            "name": "_inRegion",
            "params": [
                {
                    "name": "inner",
                    "description": "Inner region.",
                    "type": "Object"
                },
                {
                    "name": "outer",
                    "description": "Outer region.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "`true` if the _inner_ region fits entirely within\n    the _outer_ region or, if not, a numerical score indicating how much of\n    the inner region fits.",
                "type": "Boolean|Number"
            },
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 694,
            "description": "Intelligently positions the _htmlNode_ of the given submenu _item_ relative\nto its parent so that as much as possible of the submenu will be visible\nwithin the viewport.",
            "itemtype": "method",
            "name": "_positionMenu",
            "params": [
                {
                    "name": "item",
                    "description": "Menu item to position.",
                    "type": "Menu.Item"
                },
                {
                    "name": "htmlNode",
                    "description": "HTML node for the menu item.",
                    "type": "Node",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 738,
            "description": "Handles `add` events for this menu.",
            "itemtype": "method",
            "name": "_afterAdd",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 779,
            "description": "Handles `clear` events for this menu.",
            "itemtype": "method",
            "name": "_afterClear",
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 800,
            "description": "Handles `mousedown` events on the document.",
            "itemtype": "method",
            "name": "_afterDocMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 821,
            "description": "Handles `close` events for this menu.",
            "itemtype": "method",
            "name": "_afterClose",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 846,
            "description": "Handles `disable` events for this menu.",
            "itemtype": "method",
            "name": "_afterDisable",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 861,
            "description": "Handles `enable` events for this menu.",
            "itemtype": "method",
            "name": "_afterEnable",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 876,
            "description": "Handles `hide` events for this menu.",
            "itemtype": "method",
            "name": "_afterHide",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 892,
            "description": "Handles `open` events for this menu.",
            "itemtype": "method",
            "name": "_afterOpen",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 931,
            "description": "Handles `orientationChange` events for this menu.",
            "itemtype": "method",
            "name": "_afterOrientationChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 947,
            "description": "Handles `remove` events for this menu.",
            "itemtype": "method",
            "name": "_afterRemove",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 969,
            "description": "Handles `show` events for this menu.",
            "itemtype": "method",
            "name": "_afterShow",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 985,
            "description": "Handles `visibleChange` events for this menu.",
            "itemtype": "method",
            "name": "_afterVisibleChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 996,
            "description": "Handles click events on menu items.",
            "itemtype": "method",
            "name": "_onItemClick",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1036,
            "description": "Handles delegated `mouseenter` events on menu items.",
            "itemtype": "method",
            "name": "_onItemMouseEnter",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1057,
            "description": "Handles delegated `mouseleave` events on menu items.",
            "itemtype": "method",
            "name": "_onItemMouseLeave",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1078,
            "description": "Handles `mouseenter` events on this menu.",
            "itemtype": "method",
            "name": "_onMenuMouseEnter",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1089,
            "description": "Handles `mouseleave` events on this menu.",
            "itemtype": "method",
            "name": "_onMenuMouseLeave",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1112,
            "description": "Default handler for the generic `itemClick` event.",
            "itemtype": "method",
            "name": "_defItemClickFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1133,
            "description": "Default handler for item-specific `itemClick#<id>` events.",
            "itemtype": "method",
            "name": "_defSpecificItemClickFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1148,
            "description": "Preferred alignment positions at which this menu should be displayed\nrelative to the anchor point when one is provided to the `show()`,\n`toggle()`, or `reposition()` methods.\n\nThe most optimal alignment position will be chosen automatically based\non which one allows the most of this menu to be visible within the\nbrowser's viewport. If multiple positions are equally visible, then the\noptimal position will be chosen based on its order in this array.\n\nAn alignment position is a string like \"tl-bl\", which means \"align the\ntop left of this menu to the bottom left of its anchor point\".\n\nAny combination of top/bottom/left/right alignment positions may be used\nas long as they follow this format. Here are a few examples:\n\n  * `'bl-br'`: Align the bottom left of this menu with the bottom right\n    of the anchor point.\n  * `'br-bl'`: Align the bottom right of this menu with the bottom left\n    of the anchor point.\n  * `'tl-tr'`: Align the top left of this menu with the top right of\n    the anchor point.\n  * `'tr-tl'`: Align the top right of this menu to the top left of this\n    anchor point.",
            "itemtype": "attribute",
            "name": "alignments",
            "type": "String[]",
            "default": "['tl-bl', 'tr-br', 'bl-tl', 'br-tr']",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1182,
            "description": "If `true`, this menu will be hidden when the user clicks on a menu item\nthat doesn't contain a submenu.",
            "itemtype": "attribute",
            "name": "hideOnClick",
            "type": "Boolean",
            "default": "true",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1193,
            "description": "If `true`, this menu will be hidden when the user moves the mouse\noutside the menu.",
            "itemtype": "attribute",
            "name": "hideOnMouseLeave",
            "type": "Boolean",
            "default": "false",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1204,
            "description": "If `true`, this menu will be hidden when the user clicks somewhere\noutside the menu.",
            "itemtype": "attribute",
            "name": "hideOnOutsideClick",
            "type": "Boolean",
            "default": "true",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1215,
            "description": "Orientation of this menu. May be either `'vertical'` or `'horizontal'`.",
            "itemtype": "attribute",
            "name": "orientation",
            "type": "String",
            "default": "'vertical'",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1225,
            "description": "Just like `alignments`, but for submenus of this menu. See the\n`alignments` attribute for details on how alignment positions work.",
            "itemtype": "attribute",
            "name": "subMenuAlignments",
            "type": "String[]",
            "default": "['tl-tr', 'bl-br', 'tr-tl', 'br-bl']",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-menu/js/menu.js",
            "line": 1238,
            "description": "Whether or not this menu is visible. Changing this attribute's value\nwill also change the visibility of this menu.",
            "itemtype": "attribute",
            "name": "visible",
            "type": "Boolean",
            "default": "false",
            "class": "Menu",
            "module": "gallery-sm-menu"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 39,
            "description": "Returns a new Range object with the same boundary points as this range.\n\nThe returned Range is a copy, not a reference, so modifying it will not\naffect this range (and vice versa).",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "New Range object with the same boundary points as this\n    range.",
                "type": "Range"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 55,
            "description": "Returns a Node instance containing a document fragment with a copy of this\nrange's contents.\n\nEvent listeners are not copied.\n\nElement ids _are_ copied. This could lead to duplicate ids, so be careful.\n\nPartially selected nodes will include parent tags to ensure that the\nfragment is valid.",
            "itemtype": "method",
            "name": "cloneContents",
            "return": {
                "description": "Node instance containing a document fragment with a copy of\n    this range's contents.",
                "type": "Node"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 76,
            "description": "Collapses this range by setting the start and end points to the same\nposition, thus resulting in an empty range.",
            "itemtype": "method",
            "name": "collapse",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "toStart",
                            "description": "If `true`, this range will be\n        collapsed by moving the end point to the start point. Otherwise, the\n        start point will be moved to the end point.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 92,
            "description": "Compares the start or end boundary of this range with the start or end\nboundary of another range.",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "otherRange",
                    "description": "Range to compare to.",
                    "type": "Range"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "myPoint",
                            "description": "Specifies which boundary point\n        on this range should be used for the comparison. Valid values are\n        'start' to use this range's start point for the comparison, or 'end'\n        to use this range's end point.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'start'"
                        },
                        {
                            "name": "otherPoint",
                            "description": "Specifies which boundary\n        point on _otherRange_ should be used for the comparison. Valid\n        values are 'start' to use _otherRange_'s start point for the\n        comparison, or 'end' to use _otherRange_'s end point.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'start'"
                        }
                    ]
                }
            ],
            "return": {
                "description": "-1, 0, or 1, indicating whether this range's boundary is\n    respectively before, equal to, or after the other range's boundary.",
                "type": "Number"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 130,
            "description": "Removes the contents of this range from the DOM.",
            "itemtype": "method",
            "name": "deleteContents",
            "chainable": 1,
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 143,
            "description": "Gets or sets the node that contains the end point of this range.\n\nWhen specifying an _offset_, you may specify either a number or the string\n\"before\" or \"after\".\n\nA numerical offset will position the end point at that offset inside the\n_node_. If _node_ is a text node, the offset will represent a character\nposition. If _node_ can contain child nodes, then the offset will represent\na child index.\n\nThe offset \"before\" will cause the end point to be placed immediately before\n_node_ (not inside it).\n\nThe offset \"after\" will cause the end point to be placed immediately after\n_node_ (not inside it).",
            "itemtype": "method",
            "name": "endNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to set the end point to. May be\n    specified as a Node instance, HTMLElement, or selector string. If not\n    specified, the current end point will be returned.",
                    "type": "HTMLElement|Node|String",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "Offset position of the new end point\n    relative to the _node_. If this is a number, it will be used as an\n    offset position inside _node_. To specify a position immediately before\n    _node_, use the string \"before\". To specify a position immediately after\n    _node_, use the string \"after\".",
                    "type": "Number|String",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Node that contains the end point of this range.",
                "type": "Node"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 191,
            "description": "Gets or sets the offset of this selection's end position inside the end\nnode.\n\nIf the end node is a text node, the offset represents a character position.\nIf the end node can contain child nodes, then the offset represents a child\nindex.\n\nWhen setting an offset, you may use a numerical offset (which behaves as\ndescribed above) or the string \"before\" or \"after\".\n\nThe offset \"before\" will cause the end point to be placed immediately before\nthe current end node (not inside it).\n\nThe offset \"after\" will cause the end point to be placed immediately after\nthe current end node (not inside it).\n\nNote that setting a \"before\" or \"after\" offset will change the end node. To\nget the new end node, call `endNode()`.",
            "itemtype": "method",
            "name": "endOffset",
            "params": [
                {
                    "name": "offset",
                    "description": "Offset position of the new end point\n    relative to the current end node. If this is a number, it will be used\n    as an offset position inside the node. To specify a position immediately\n    before the node, use the string \"before\". To specify a position\n    immediately after the node, use the string \"after\".",
                    "type": "Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Offset of this selection's end position inside the end\n    node.",
                "type": "Number"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 230,
            "description": "Moves this range's contents into a document fragment and returns a Node\ninstance containing that fragment.\n\nEvent listeners are not retained.\n\nIf this range splits a non-text element, the resulting fragment will include\na clone of that element, including its id (if it has one). This could lead\nto duplicate ids, so be careful.",
            "itemtype": "method",
            "name": "extractContents",
            "return": {
                "description": "Node instance containing a document fragment with this\n    range's contents.",
                "type": "Node"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 250,
            "description": "Inserts a node at the start of this range.",
            "itemtype": "method",
            "name": "insertNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node instance, HTMLElement, or\n    selector string of a node to insert.",
                    "type": "HTMLElement|Node|String"
                }
            ],
            "return": {
                "description": "Inserted node.",
                "type": "Node"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 266,
            "description": "Returns `true` if this range is collapsed, `false` otherwise.\n\nA `true` value means that the start and end points are the same and the\nrange is empty, whereas a `false` value means that the start and end points\nare different and the range is not empty.",
            "itemtype": "method",
            "name": "isCollapsed",
            "return": {
                "description": "`true` if this range is collapsed, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 282,
            "description": "Returns `true` if this range has the same boundaries as _otherRange_,\n`false` otherwise.",
            "itemtype": "method",
            "name": "isEquivalent",
            "params": [
                {
                    "name": "otherRange",
                    "description": "Range to compare this range to.",
                    "type": "Range"
                }
            ],
            "return": {
                "description": "`true` if this range has the same boundaries as\n    _otherRange_, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 296,
            "description": "Returns `true` if this range is entirely contained within the given _node_.",
            "itemtype": "method",
            "name": "isInsideNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node instance, HTML element, or\n    selector string of the container.",
                    "type": "HTMLElement|Node|String"
                }
            ],
            "return": {
                "description": "`true` if this range is entirely contained within the\n    given _node_, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 322,
            "description": "Returns the nearest common ancestor node that fully contains all nodes\nwithin this range.",
            "itemtype": "method",
            "name": "parentNode",
            "return": {
                "description": "Nearest common ancestor node that fully contains all nodes\n    within this range.",
                "type": "Node"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 336,
            "description": "Gets or sets the node that contains the start point of this range.\n\nWhen specifying an _offset_, you may specify either a number or the string\n\"before\" or \"after\".\n\nA numerical offset will position the start point at that offset inside the\n_node_. If _node_ is a text node, the offset will represent a character\nposition. If _node_ can contain child nodes, then the offset will represent\na child index.\n\nThe offset \"before\" will cause the start point to be placed immediately\nbefore _node_ (not inside it).\n\nThe offset \"after\" will cause the start point to be placed immediately after\n_node_ (not inside it).",
            "itemtype": "method",
            "name": "startNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to set the start point to. May\n    be specified as a Node instance, HTMLElement, or selector string. If not\n    specified, the current start point will be returned.",
                    "type": "HTMLElement|Node|String",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "Offset position of the new start point\n    relative to the _node_. If this is a number, it will be used as an\n    offset position inside _node_. To specify a position immediately before\n    _node_, use the string \"before\". To specify a position immediately after\n    _node_, use the string \"after\".",
                    "type": "Number|String",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Node that contains the start point of this range.",
                "type": "Node"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 384,
            "description": "Gets or sets the offset of this range's start position inside the start\nnode.\n\nIf the start node is a text node, the offset represents a character\nposition. If the start node can contain child nodes, then the offset\nrepresents a child index.\n\nWhen setting an offset, you may use a numerical offset (which behaves as\ndescribed above) or the string \"before\" or \"after\".\n\nThe offset \"before\" will cause the start point to be placed immediately\nbefore the current start node (not inside it).\n\nThe offset \"after\" will cause the start point to be placed immediately after\nthe current start node (not inside it).\n\nNote that setting a \"before\" or \"after\" offset will change the start node.\nTo get the new start node, call `startNode()`.",
            "itemtype": "method",
            "name": "startOffset",
            "params": [
                {
                    "name": "offset",
                    "description": "Offset position of the new start point\n    relative to the current start node. If this is a number, it will be used\n    as an offset position inside the node. To specify a position immediately\n    before the node, use the string \"before\". To specify a position\n    immediately after the node, use the string \"after\".",
                    "type": "Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Offset of this range's start position inside the start\n    node.",
                "type": "Number"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 423,
            "description": "Returns the HTML content of this range.",
            "itemtype": "method",
            "name": "toHTML",
            "return": {
                "description": "HTML content of this range.",
                "type": "HTML"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 438,
            "description": "Returns the plain text content of this range.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Plain text content of this range.",
                "type": "String"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 450,
            "description": "Traverses the contents of the range, passing each node and its children to\nthe supplied callback in document order.\n\nFor example, if the range includes the following HTML...\n\n    lorem ipsum <b>dolor <i>sit</i></b> amet\n\n...then this `traverse()` call...\n\n    range.traverse(function (node) {\n        console.log(Y.Node.getDOMNode(node));\n    });\n\n...would result in the following console output:\n\n    \"lorem ipsum \"\n    <b> element\n    \"dolor \"\n    <i> element\n    \"sit\"\n    \" amet\"\n\nThe entire start and end node will be included even if the range only\nincludes a portion of them. Use the `startOffset()` and `endOffset()`\nmethods to determine where the precise boundaries are if necessary.",
            "itemtype": "method",
            "name": "traverse",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "node",
                            "description": "Node instance.",
                            "type": "Node"
                        }
                    ]
                },
                {
                    "name": "thisObj",
                    "description": "`this` object to use when calling the callback\n    function.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/range.js",
            "line": 528,
            "description": "Wraps this range in the specified HTML and returns the new wrapper node.",
            "itemtype": "method",
            "name": "wrap",
            "params": [
                {
                    "name": "html",
                    "description": "HTML string.",
                    "type": "HTML"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "includeWrapper",
                            "description": "If `true`, this range\n        will be updated to include the new wrapper node.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "New wrapper node.",
                "type": "Node"
            },
            "class": "Range",
            "module": "gallery-sm-selection",
            "submodule": "gallery-sm-range"
        },
        {
            "file": "src/sm-selection/js/selection.js",
            "line": 59,
            "description": "Returns the `Range` instance at the specified _index_, or the first range in\nthis selection if no index is specified. If no ranges are selected, returns\n`null`.",
            "itemtype": "method",
            "name": "range",
            "params": [
                {
                    "name": "index",
                    "description": "Range index.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Range instance at the specified _index_, or the first range\n    in this selection if no index is specified. If no ranges are selected,\n    returns `null`.",
                "type": "Range"
            },
            "class": "Selection",
            "module": "gallery-sm-selection"
        },
        {
            "file": "src/sm-selection/js/selection.js",
            "line": 77,
            "description": "Returns an array containing all the ranges in this selection.",
            "itemtype": "method",
            "name": "ranges",
            "return": {
                "description": "Array containing all the ranges in this selection.",
                "type": "Range[]"
            },
            "class": "Selection",
            "module": "gallery-sm-selection"
        },
        {
            "file": "src/sm-selection/js/selection.js",
            "line": 93,
            "description": "Selects the specified _range_.\n\nBy default, this will result in only this range being selected. If\n`options.multi` is truthy, then the _range_ will be added to the current\nselection without first unselecting any other selected ranges.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "range",
                    "description": "Range to select.",
                    "type": "Range"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "multi",
                            "description": "If `true`, the specified _range_\n        will be added to the current list of selected ranges instead of\n        replacing the current selection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Selection",
            "module": "gallery-sm-selection"
        },
        {
            "file": "src/sm-selection/js/selection.js",
            "line": 119,
            "description": "Removes the specified _range_ from this selection, or unselects all ranges\nif no _range_ is specified.",
            "itemtype": "method",
            "name": "unselect",
            "params": [
                {
                    "name": "range",
                    "description": "Range to unselect.",
                    "type": "Range",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Selection",
            "module": "gallery-sm-selection"
        },
        {
            "file": "src/sm-selection/js/selection.js",
            "line": 142,
            "description": "Returns a string representation of the combined text content of all the\nranges in this selection.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String representation of the combined text content of all\n    the ranges in this selection.",
                "type": "String"
            },
            "class": "Selection",
            "module": "gallery-sm-selection"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-node-openable.js",
            "line": 21,
            "description": "Closes this node if it's currently open.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `close` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Node.Openable",
            "module": "tree-openable",
            "submodule": "tree-node-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-node-openable.js",
            "line": 35,
            "description": "Returns `true` if this node is currently open.\n\nNote: the root node of a tree is always considered to be open.",
            "itemtype": "method",
            "name": "isOpen",
            "return": {
                "description": "`true` if this node is currently open, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Tree.Node.Openable",
            "module": "tree-openable",
            "submodule": "tree-node-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-node-openable.js",
            "line": 47,
            "description": "Opens this node if it's currently closed.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `open` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Node.Openable",
            "module": "tree-openable",
            "submodule": "tree-node-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-node-openable.js",
            "line": 61,
            "description": "Toggles the open/closed state of this node, closing it if it's currently\nopen or opening it if it's currently closed.",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, events will be\n        suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Node.Openable",
            "module": "tree-openable",
            "submodule": "tree-node-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-node-selectable.js",
            "line": 21,
            "description": "Returns `true` if this node is currently selected.",
            "itemtype": "method",
            "name": "isSelected",
            "return": {
                "description": "`true` if this node is currently selected, `false`\n    otherwise.",
                "type": "Boolean"
            },
            "class": "Tree.Node.Selectable",
            "module": "tree-selectable",
            "submodule": "tree-node-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-node-selectable.js",
            "line": 32,
            "description": "Selects this node.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `select` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Node.Selectable",
            "module": "tree-selectable",
            "submodule": "tree-node-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-node-selectable.js",
            "line": 46,
            "description": "Unselects this node.",
            "itemtype": "method",
            "name": "unselect",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `unselect` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Node.Selectable",
            "module": "tree-selectable",
            "submodule": "tree-node-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 19,
            "description": "Fired when a node is closed.",
            "itemtype": "event",
            "name": "close",
            "params": [
                {
                    "name": "node",
                    "description": "Node being closed.",
                    "type": "Tree.Node"
                }
            ],
            "preventable": "_defCloseFn",
            "class": "Tree.Openable",
            "module": "tree",
            "submodule": "tree-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 28,
            "description": "Fired when a node is opened.",
            "itemtype": "event",
            "name": "open",
            "params": [
                {
                    "name": "node",
                    "description": "Node being opened.",
                    "type": "Tree.Node"
                }
            ],
            "preventable": "_defOpenFn",
            "class": "Tree.Openable",
            "module": "tree",
            "submodule": "tree-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 47,
            "description": "Closes the specified node if it isn't already closed.",
            "itemtype": "method",
            "name": "closeNode",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `close` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Openable",
            "module": "tree",
            "submodule": "tree-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 67,
            "description": "Opens the specified node if it isn't already open.",
            "itemtype": "method",
            "name": "openNode",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `open` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Openable",
            "module": "tree",
            "submodule": "tree-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 87,
            "description": "Toggles the open/closed state of the specified node, closing it if it's\ncurrently open or opening it if it's currently closed.",
            "itemtype": "method",
            "name": "toggleNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to toggle.",
                    "type": "Tree.Node"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, events will be\n        suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Openable",
            "module": "tree",
            "submodule": "tree-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 105,
            "description": "Default handler for the `close` event.",
            "itemtype": "method",
            "name": "_defCloseFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Tree.Openable",
            "module": "tree",
            "submodule": "tree-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-openable.js",
            "line": 116,
            "description": "Default handler for the `open` event.",
            "itemtype": "method",
            "name": "_defOpenFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Tree.Openable",
            "module": "tree",
            "submodule": "tree-openable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 19,
            "description": "Fired when a node is selected.",
            "itemtype": "event",
            "name": "select",
            "params": [
                {
                    "name": "node",
                    "description": "Node being selected.",
                    "type": "Tree.Node"
                }
            ],
            "preventable": "_defSelectFn",
            "class": "Tree.Selectable",
            "module": "tree",
            "submodule": "tree-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 28,
            "description": "Fired when a node is unselected.",
            "itemtype": "event",
            "name": "unselect",
            "params": [
                {
                    "name": "node",
                    "description": "Node being unselected.",
                    "type": "Tree.Node"
                }
            ],
            "preventable": "_defUnselectFn",
            "class": "Tree.Selectable",
            "module": "tree",
            "submodule": "tree-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 46,
            "description": "Mapping of node ids to node instances for nodes in this tree that are\ncurrently selected.",
            "itemtype": "property",
            "name": "_selectedMap",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "class": "Tree.Selectable",
            "module": "tree",
            "submodule": "tree-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 74,
            "description": "Returns an array of nodes that are currently selected.",
            "itemtype": "method",
            "name": "getSelectedNodes",
            "return": {
                "description": "Array of selected nodes.",
                "type": "Tree.Node.Selectable[]"
            },
            "class": "Tree.Selectable",
            "module": "tree",
            "submodule": "tree-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 84,
            "description": "Selects the specified node.",
            "itemtype": "method",
            "name": "selectNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to select.",
                    "type": "Tree.Node.Selectable"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `select` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Selectable",
            "module": "tree",
            "submodule": "tree-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 109,
            "description": "Unselects all selected nodes.",
            "itemtype": "method",
            "name": "unselect",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `unselect` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Selectable",
            "module": "tree",
            "submodule": "tree-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 128,
            "description": "Unselects the specified node.",
            "itemtype": "method",
            "name": "unselectNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to unselect.",
                    "type": "Tree.Node.Selectable"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `unselect` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Selectable",
            "module": "tree",
            "submodule": "tree-selectable"
        },
        {
            "file": "src/sm-tree/js/extensions/tree-selectable.js",
            "line": 188,
            "description": "Whether or not to allow multiple nodes to be selected at once.",
            "itemtype": "attribute",
            "name": "multiSelect",
            "type": "Boolean",
            "default": "false",
            "class": "Tree.Selectable",
            "module": "tree",
            "submodule": "tree-selectable"
        },
        {
            "file": "src/sm-tree/js/plugins/tree-lazy.js",
            "line": 67,
            "description": "Fired when the `load()` method indicates there was an error loading child nodes.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": "Error provided by the `load()` method.",
                    "type": "Error"
                },
                {
                    "name": "src",
                    "description": "Source of the error (defaults to \"load\").",
                    "type": "String"
                }
            ],
            "class": "Plugin.Tree.Lazy",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-lazy"
        },
        {
            "file": "src/sm-tree/js/plugins/tree-lazy.js",
            "line": 76,
            "description": "Fired after child nodes have finished loading and have been added to the tree.",
            "itemtype": "event",
            "name": "loaded",
            "params": [
                {
                    "name": "node",
                    "description": "Tree node whose children have been loaded.",
                    "type": "Tree.Node"
                }
            ],
            "class": "Plugin.Tree.Lazy",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-lazy"
        },
        {
            "file": "src/sm-tree/js/plugins/tree-lazy.js",
            "line": 84,
            "description": "Fired just before the custom `load()` method is called to load child nodes for a\nnode.\n\nCalling `preventDefault()` on this event's facade will cancel the load action\nand prevent the `load()` method from being called.",
            "itemtype": "event",
            "name": "loading",
            "params": [
                {
                    "name": "node",
                    "description": "Tree node whose children will be loaded.",
                    "type": "Tree.Node"
                }
            ],
            "preventable": "_defLoadingFn",
            "class": "Plugin.Tree.Lazy",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-lazy"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 77,
            "description": "Whether or not this node can contain child nodes.\n\nThis value is falsy by default unless child nodes are added at instantiation\ntime, in which case it will be automatically set to `true`. You can also\nmanually set it to `true` to indicate that a node can have children even if\nit doesn't currently have any children.\n\nNote that regardless of the value of this property, appending, prepending,\nor inserting a node into this node will cause `canHaveChildren` to be set to\ntrue automatically.",
            "itemtype": "property",
            "name": "canHaveChildren",
            "type": "Boolean",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 92,
            "description": "Child nodes contained within this node.",
            "itemtype": "property",
            "name": "children",
            "type": "Tree.Node[]",
            "default": "[]",
            "readonly": "",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 100,
            "description": "Arbitrary implementation-specific data related to this node.\n\nThis property is created by setting a `data` property in the config object\npassed to Tree.Node's constructor. It may contain any serializable data\nyou want to store on this node instance.",
            "itemtype": "property",
            "name": "data",
            "type": "Object",
            "default": "{}",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 111,
            "description": "Unique id for this node.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "readonly": "",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 118,
            "description": "User-visible HTML label for this node.\n\nThis value may be rendered as HTML without sanitization, so **do not** put\nuntrusted user input here without escaping it first using `Y.Escape.html()`.",
            "itemtype": "property",
            "name": "label",
            "type": "HTML",
            "default": "''",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 129,
            "description": "Parent node of this node, or `undefined` if this is an unattached node or\nthe root node.",
            "itemtype": "property",
            "name": "parent",
            "type": "Tree.Node",
            "readonly": "",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 137,
            "description": "Current state of this node.",
            "itemtype": "property",
            "name": "state",
            "type": "Object",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 143,
            "description": "The Tree instance with which this node is associated.",
            "itemtype": "property",
            "name": "tree",
            "type": "Tree",
            "readonly": "",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 152,
            "description": "Mapping of child node ids to indices.",
            "itemtype": "property",
            "name": "_indexMap",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 159,
            "description": "Flag indicating whether the `_indexMap` is stale and needs to be rebuilt.",
            "itemtype": "property",
            "name": "_isIndexStale",
            "type": "Boolean",
            "default": "true",
            "access": "protected",
            "tagname": "",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 168,
            "description": "Simple way to type-check that this is an instance of Tree.Node.",
            "itemtype": "property",
            "name": "_isYUITreeNode",
            "type": "Boolean",
            "default": "true",
            "access": "protected",
            "tagname": "",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 177,
            "description": "Array of property names on this node that should be serialized to JSON when\n`toJSON()` is called.\n\nNote that the `children` property is a special case that is managed\nseparately.",
            "itemtype": "property",
            "name": "_serializable",
            "type": "String[]",
            "access": "protected",
            "tagname": "",
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 191,
            "description": "Appends the given tree node or array of nodes to the end of this node's\nchildren.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "node",
                    "description": "Child node, node config\n    object, array of child nodes, or array of node config objects to append\n    to the given parent. Node config objects will automatically be converted\n    into node instances.",
                    "type": "Object|Object[]|Tree.Node|Tree.Node[]"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `add` event will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Node or array of nodes that were appended.",
                "type": "Tree.Node|Tree.Node[]"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 211,
            "description": "Removes all children from this node. The removed children will still be\nreusable unless the `destroy` option is truthy.",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "destroy",
                            "description": "If `true`, the children will\n        also be destroyed, which makes them available for garbage collection\n        and means they can't be reused.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "silent",
                            "description": "If `true`, `remove` events will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Array of removed child nodes.",
                "type": "Tree.Node[]"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 228,
            "description": "Returns `true` if this node has one or more child nodes.",
            "itemtype": "method",
            "name": "hasChildren",
            "return": {
                "description": "`true` if this node has one or more child nodes, `false`\n    otherwise.",
                "type": "Boolean"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 239,
            "description": "Returns the numerical index of this node within its parent node, or `-1` if\nthis node doesn't have a parent node.",
            "itemtype": "method",
            "name": "index",
            "return": {
                "description": "Index of this node within its parent node, or `-1` if this\n    node doesn't have a parent node.",
                "type": "Number"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 251,
            "description": "Returns the numerical index of the given child node, or `-1` if the node is\nnot a child of this node.",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "node",
                    "description": "Child node.",
                    "type": "Tree.Node"
                }
            ],
            "return": {
                "description": "Index of the child, or `-1` if the node is not a child of\n    this node.",
                "type": "Number"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 272,
            "description": "Inserts a node or array of nodes at the specified index under this node, or\nappends them to this node if no index is specified.\n\nIf a node being inserted is from another tree, it and all its children will\nbe removed from that tree and moved to this one.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "node",
                    "description": "Child node, node config\n    object, array of child nodes, or array of node config objects to insert\n    under the given parent. Node config objects will automatically be\n    converted into node instances.",
                    "type": "Object|Object[]|Tree.Node|Tree.Node[]"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "index",
                            "description": "Index at which to insert the child node.\n        If not specified, the node will be appended as the last child of the\n        parent.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "silent",
                            "description": "If `true`, the `add` event will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Node or array of nodes that were inserted.",
                "type": "Tree.Node[]"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 298,
            "description": "Returns `true` if this node has been inserted into a tree, `false` if it is\nmerely associated with a tree and has not yet been inserted.",
            "itemtype": "method",
            "name": "isInTree",
            "return": {
                "description": "`true` if this node has been inserted into a tree, `false`\n    otherwise.",
                "type": "Boolean"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 314,
            "description": "Returns `true` if this node is the root of the tree.",
            "itemtype": "method",
            "name": "isRoot",
            "return": {
                "description": "`true` if this node is the root of the tree, `false`\n    otherwise.",
                "type": "Boolean"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 325,
            "description": "Prepends a node or array of nodes at the beginning of this node's children.\n\nIf a node being prepended is from another tree, it and all its children will\nbe removed from that tree and moved to this one.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "node",
                    "description": "Child node, node config\n    object, array of child nodes, or array of node config objects to prepend\n    to this node. Node config objects will automatically be converted into\n    node instances.",
                    "type": "Object|Object[]|Tree.Node|Tree.Node[]"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `add` event will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Node or array of nodes that were prepended.",
                "type": "Tree.Node|Tree.Node[]"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 345,
            "description": "Removes this node from its parent node.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "destroy",
                            "description": "If `true`, this node and all\n        its children will also be destroyed, which makes them available for\n        garbage collection and means they can't be reused.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "silent",
                            "description": "If `true`, the `remove` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 361,
            "description": "Returns the total number of nodes contained within this node, including all\ndescendants of this node's children.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "Total number of nodes contained within this node, including\n    all descendants.",
                "type": "Number"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree-node.js",
            "line": 381,
            "description": "Serializes this node to an object suitable for use in JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "Serialized node object.",
                "type": "Object"
            },
            "class": "Tree.Node",
            "module": "gallery-sm-tree",
            "submodule": "gallery-sm-tree-node"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 30,
            "description": "Fired when a node is added to this Tree. The `src` property will indicate\nhow the node was added (\"append\", \"insert\", \"prepend\", etc.).",
            "itemtype": "event",
            "name": "add",
            "params": [
                {
                    "name": "index",
                    "description": "Index at which the node will be added.",
                    "type": "Number"
                },
                {
                    "name": "node",
                    "description": "Node being added.",
                    "type": "Tree.Node"
                },
                {
                    "name": "parent",
                    "description": "Parent node to which the node will be added.",
                    "type": "Tree.Node"
                },
                {
                    "name": "src",
                    "description": "Source of the event (\"append\", \"insert\", \"prepend\",\n    etc.).",
                    "type": "String"
                }
            ],
            "preventable": "_defAddFn",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 44,
            "description": "Fired when this Tree is cleared.",
            "itemtype": "event",
            "name": "clear",
            "params": [
                {
                    "name": "rootNode",
                    "description": "New root node of this tree (the old root node is\n    always destroyed when a tree is cleared).",
                    "type": "Tree.Node"
                }
            ],
            "preventable": "_defClearFn",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 54,
            "description": "Fired when a node is removed from this Tree.",
            "itemtype": "event",
            "name": "remove",
            "params": [
                {
                    "name": "destroy",
                    "description": "Whether or not the node will be destroyed after\n    being removed from this tree.",
                    "type": "Boolean"
                },
                {
                    "name": "node",
                    "description": "Node being removed.",
                    "type": "Tree.Node"
                },
                {
                    "name": "parent",
                    "description": "Parent node from which the node will be removed.",
                    "type": "Tree.Node"
                }
            ],
            "preventable": "_defRemoveFn",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 69,
            "description": "Reference to the `children` array of this Tree's `rootNode`.\n\nThis is a convenience property to allow you to type `tree.children` instead\nof `tree.rootNode.children`.",
            "itemtype": "property",
            "name": "children",
            "type": "Tree.Node[]",
            "readonly": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 79,
            "description": "The `Tree.Node` class or subclass that should be used for nodes created by\nthis tree.\n\nYou may specific an actual class reference or a string that resolves to a\nclass reference at runtime.",
            "itemtype": "property",
            "name": "nodeClass",
            "type": "String|Tree.Node",
            "default": "Y.Tree.Node",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 91,
            "description": "Optional array containing one or more extension classes that should be mixed\ninto the `nodeClass` when this Tree is instantiated. The resulting composed\nnode class will be unique to this Tree instance and will not affect any\nother instances, nor will it modify the defined `nodeClass` itself.\n\nThis provides a late-binding extension mechanism for nodes that doesn't\nrequire them to extend `Y.Base`, which would incur a significant performance\nhit.",
            "itemtype": "property",
            "name": "nodeExtensions",
            "type": "Array",
            "default": "[]",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 106,
            "description": "Root node of this Tree.",
            "itemtype": "property",
            "name": "rootNode",
            "type": "Tree.Node",
            "readonly": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 115,
            "description": "Simple way to type-check that this is a Tree instance.",
            "itemtype": "property",
            "name": "_isYUITree",
            "type": "Boolean",
            "default": "true",
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 124,
            "description": "Composed node class based on `nodeClass` that mixes in any extensions\nspecified in `nodeExtensions`. If there are no extensions, this will just be\na reference to `nodeClass`.",
            "itemtype": "property",
            "name": "_nodeClass",
            "type": "Tree.Node",
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 133,
            "description": "Mapping of node ids to node instances for nodes in this tree.",
            "itemtype": "property",
            "name": "_nodeMap",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 140,
            "description": "Default config object for the root node.",
            "itemtype": "property",
            "name": "_rootNodeConfig",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 160,
            "description": "Hash of published custom events.",
            "itemtype": "property",
            "name": "_published",
            "type": "Object",
            "default": "{}",
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 194,
            "description": "Appends a node or array of nodes as the last child of the specified parent\nnode.\n\nIf a node being appended is from another tree, it and all its children will\nbe removed from that tree and moved to this one.",
            "itemtype": "method",
            "name": "appendNode",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent node.",
                    "type": "Tree.Node"
                },
                {
                    "name": "node",
                    "description": "Child node, node config\n    object, array of child nodes, or array of node config objects to append\n    to the given parent. Node config objects will automatically be converted\n    into node instances.",
                    "type": "Object|Object[]|Tree.Node|Tree.Node[]"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `add` event will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Node or array of nodes that were\n    appended.",
                "type": "Tree.Node|Tree.Node[]"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 220,
            "description": "Clears this tree by destroying the root node and all its children. If a\n`rootNode` argument is provided, that node will become the root node of this\ntree; otherwise, a new root node will be created.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "rootNode",
                    "description": "If specified, this node will be used as\n    the new root node.",
                    "type": "Object|Tree.Node",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `clear` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 242,
            "description": "Creates and returns a new `Tree.Node` instance associated with (but not\nyet appended to) this tree.",
            "itemtype": "method",
            "name": "createNode",
            "params": [
                {
                    "name": "config",
                    "description": "Node configuration. If a `Tree.Node`\n    instance is specified instead of a config object, that node will be\n    adopted into this tree (if it doesn't already belong to this tree) and\n    removed from any other tree to which it belongs.",
                    "type": "Object|Tree.Node",
                    "optional": true
                }
            ],
            "return": {
                "description": "New node.",
                "type": "Tree.Node"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 279,
            "description": "Removes and destroys a node and all its child nodes. Once destroyed, a node\nis eligible for garbage collection and cannot be reused or re-added to the\ntree.",
            "itemtype": "method",
            "name": "destroyNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to destroy.",
                    "type": "Tree.Node"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, `remove` events will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 324,
            "description": "Removes all children from the specified node. The removed children will\nstill be reusable unless the `destroy` option is truthy.",
            "itemtype": "method",
            "name": "emptyNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to empty.",
                    "type": "Tree.Node"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "destroy",
                            "description": "If `true`, the children will\n        also be destroyed, which makes them available for garbage collection\n        and means they can't be reused.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "silent",
                            "description": "If `true`, `remove` events will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Array of removed child nodes.",
                "type": "Tree.Node[]"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 348,
            "description": "Returns the tree node with the specified id, or `undefined` if the node\ndoesn't exist in this tree.",
            "itemtype": "method",
            "name": "getNodeById",
            "params": [
                {
                    "name": "id",
                    "description": "Node id.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Node, or `undefined` if not found.",
                "type": "Tree.Node"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 360,
            "description": "Inserts a node or array of nodes at the specified index under the given\nparent node, or appends them to the parent if no index is specified.\n\nIf a node being inserted is from another tree, it and all its children will\nbe removed from that tree and moved to this one.",
            "itemtype": "method",
            "name": "insertNode",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent node.",
                    "type": "Tree.Node"
                },
                {
                    "name": "node",
                    "description": "Child node, node config\n    object, array of child nodes, or array of node config objects to insert\n    under the given parent. Node config objects will automatically be\n    converted into node instances.",
                    "type": "Object|Object[]|Tree.Node|Tree.Node[]"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "index",
                            "description": "Index at which to insert the child node.\n        If not specified, the node will be appended as the last child of the\n        parent.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "silent",
                            "description": "If `true`, the `add` event will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Node or array of nodes that were inserted.",
                "type": "Tree.Node[]"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 434,
            "description": "Prepends a node or array of nodes at the beginning of the specified parent\nnode.\n\nIf a node being prepended is from another tree, it and all its children will\nbe removed from that tree and moved to this one.",
            "itemtype": "method",
            "name": "prependNode",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent node.",
                    "type": "Tree.Node"
                },
                {
                    "name": "node",
                    "description": "Child node,\n    node config object, array of child nodes, or array of node config\n    objects to prepend to the given parent. Node config objects will\n    automatically be converted into node instances.",
                    "type": "Object|Object[]|Tree.Node|Tree.Node[]"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "silent",
                            "description": "If `true`, the `add` event will\n        be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Node or array of nodes that were\n    prepended.",
                "type": "Tree.Node|Tree.Node[]"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 460,
            "description": "Removes the specified node from its parent node. The removed node will still\nbe reusable unless the `destroy` option is truthy.",
            "itemtype": "method",
            "name": "removeNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to remove.",
                    "type": "Tree.Node"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "destroy",
                            "description": "If `true`, the node and all its\n        children will also be destroyed, which makes them available for\n        garbage collection and means they can't be reused.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "silent",
                            "description": "If `true`, the `remove` event\n        will be suppressed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Node that was removed.",
                "type": "Tree.Node"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 490,
            "description": "Returns the total number of nodes in this tree, at all levels.\n\nUse `rootNode.children.length` to get only the number of top-level nodes.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "Total number of nodes in this tree.",
                "type": "Number"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 502,
            "description": "Serializes this tree to an object suitable for use in JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "Serialized tree object.",
                "type": "Object"
            },
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 514,
            "description": "Moves the specified node and all its children from another tree to this\ntree.",
            "itemtype": "method",
            "name": "_adoptNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to adopt.",
                    "type": "Tree.Node"
                },
                {
                    "name": "options",
                    "description": "Options to pass along to `removeNode()`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 550,
            "description": "Composes a custom late-bound tree node class (if necessary) based on the\nclasses specified in this Tree's `nodeClass` and `nodeExtensions`\nproperties.\n\nThe composed class is stored in this Tree's `_nodeClass` property. If\ncomposition wasn't necessary, then `_nodeClass` will just be a reference to\n`nodeClass`.",
            "itemtype": "method",
            "name": "_composeNodeClass",
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 605,
            "description": "Utility method for lazily publishing and firing events.",
            "itemtype": "method",
            "name": "_fire",
            "params": [
                {
                    "name": "name",
                    "description": "Event name to fire.",
                    "type": "String"
                },
                {
                    "name": "facade",
                    "description": "Event facade.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "defaultFn",
                            "description": "Default handler for this event.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "silent",
                            "description": "Whether the default handler\n        should be executed directly without actually firing the event.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-tree/js/tree.js",
            "line": 636,
            "description": "Removes the specified node from its parent node if it has one.",
            "itemtype": "method",
            "name": "_removeNodeFromParent",
            "params": [
                {
                    "name": "node",
                    "description": "Node to remove.",
                    "type": "Tree.Node"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Tree",
            "module": "gallery-sm-tree"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 26,
            "description": "CSS class names used by this treeview.",
            "itemtype": "property",
            "name": "classNames",
            "type": "Object",
            "class": "TreeView",
            "module": "gallery-sm-treeview",
            "subprops": [
                {
                    "name": "canHaveChildren",
                    "description": "Class name indicating that a tree node can\n    contain child nodes (whether or not it actually does).",
                    "type": "String"
                },
                {
                    "name": "children",
                    "description": "Class name for a list of child nodes.",
                    "type": "String"
                },
                {
                    "name": "hasChildren",
                    "description": "Class name indicating that a tree node has one\n    or more child nodes.",
                    "type": "String"
                },
                {
                    "name": "icon",
                    "description": "Class name for a tree node's icon.",
                    "type": "String"
                },
                {
                    "name": "indicator",
                    "description": "Class name for an open/closed indicator.",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "Class name for a tree node's user-visible label.",
                    "type": "String"
                },
                {
                    "name": "node",
                    "description": "Class name for a tree node item.",
                    "type": "String"
                },
                {
                    "name": "noTouch",
                    "description": "Class name added to the TreeView container when not\n    using a touchscreen device.",
                    "type": "String"
                },
                {
                    "name": "open",
                    "description": "Class name indicating that a tree node is open.",
                    "type": "String"
                },
                {
                    "name": "row",
                    "description": "Class name for a row container encompassing the\n    indicator and label within a tree node.",
                    "type": "String"
                },
                {
                    "name": "selected",
                    "description": "Class name for a tree node that's selected.",
                    "type": "String"
                },
                {
                    "name": "touch",
                    "description": "Class name added to the TreeView container when using\n    a touchscreen device.",
                    "type": "String"
                },
                {
                    "name": "treeview",
                    "description": "Class name for the TreeView container.",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 65,
            "description": "Whether or not this TreeView has been rendered.",
            "itemtype": "property",
            "name": "rendered",
            "type": "Boolean",
            "default": "false",
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 75,
            "description": "Simple way to type-check that this is a TreeView instance.",
            "itemtype": "property",
            "name": "_isYUITreeView",
            "type": "Boolean",
            "default": "true",
            "access": "protected",
            "tagname": "",
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 84,
            "description": "Cached value of the `lazyRender` attribute.",
            "itemtype": "property",
            "name": "_lazyRender",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 103,
            "description": "Returns the HTML node (as a `Y.Node` instance) associated with the specified\n`Tree.Node` instance, if any.",
            "itemtype": "method",
            "name": "getHTMLNode",
            "params": [
                {
                    "name": "treeNode",
                    "description": "Tree node.",
                    "type": "Tree.Node"
                }
            ],
            "return": {
                "description": "`Y.Node` instance associated with the given tree node, or\n    `undefined` if one was not found.",
                "type": "Node"
            },
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 120,
            "description": "Renders this TreeView into its container.\n\nIf the container hasn't already been added to the current document, it will\nbe appended to the `<body>` element.",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 149,
            "description": "Renders the children of the specified tree node.\n\nIf a container is specified, it will be assumed to be an existing rendered\ntree node, and the children will be rendered (or re-rendered) inside it.",
            "itemtype": "method",
            "name": "renderChildren",
            "params": [
                {
                    "name": "treeNode",
                    "description": "Tree node whose children should be rendered.",
                    "type": "Tree.Node"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "container",
                            "description": "`Y.Node` instance of a container into\n        which the children should be rendered. If the container already\n        contains rendered children, they will be re-rendered in place.",
                            "type": "Node",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "`Y.Node` instance containing the rendered children.",
                "type": "Node"
            },
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 203,
            "description": "Renders the specified tree node and its children (if any).\n\nIf a container is specified, the rendered node will be appended to it.",
            "itemtype": "method",
            "name": "renderNode",
            "params": [
                {
                    "name": "treeNode",
                    "description": "Tree node to render.",
                    "type": "Tree.Node"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "container",
                            "description": "`Y.Node` instance of a container to\n        which the rendered tree node should be appended.",
                            "type": "Node",
                            "optional": true
                        },
                        {
                            "name": "renderChildren",
                            "description": "Whether or not to render\n        this node's children.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "`Y.Node` instance of the rendered tree node.",
                "type": "Node"
            },
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 308,
            "description": "Setter for the `lazyRender` attribute.\n\nJust caches the value in a property for faster lookups.",
            "itemtype": "method",
            "name": "_setLazyRender",
            "return": {
                "description": "Value.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        },
        {
            "file": "src/sm-treeview/js/treeview.js",
            "line": 505,
            "description": "When `true`, a node's children won't be rendered until the first time\nthat node is opened.\n\nThis can significantly speed up the time it takes to render a large\ntree, but might not make sense if you're using CSS that doesn't hide the\ncontents of closed nodes.",
            "itemtype": "attribute",
            "name": "lazyRender",
            "type": "Boolean",
            "default": "true",
            "class": "TreeView",
            "module": "gallery-sm-treeview"
        }
    ],
    "warnings": []
}